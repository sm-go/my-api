swagger: "2.0"
info:
  title: beego Test API
  description: |
    beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /image/:
    get:
      tags:
      - image
      description: |-
        get Image
        <br>
      operationId: ImageController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Image'
        "403":
          description: ""
    post:
      tags:
      - image
      description: |-
        create Image
        <br>
      operationId: ImageController.Post
      parameters:
      - in: body
        name: body
        description: body for Image content
        required: true
        schema:
          $ref: '#/definitions/models.Image'
      responses:
        "201":
          description: '{int} models.Image'
        "403":
          description: body is empty
  /image/{id}:
    get:
      tags:
      - image
      description: |-
        get Image by id
        <br>
      operationId: ImageController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Image'
        "403":
          description: :id is empty
    put:
      tags:
      - image
      description: |-
        update the Image
        <br>
      operationId: ImageController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Image content
        required: true
        schema:
          $ref: '#/definitions/models.Image'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Image'
        "403":
          description: :id is not int
    delete:
      tags:
      - image
      description: |-
        delete the Image
        <br>
      operationId: ImageController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /posts/:
    get:
      tags:
      - posts
      description: |-
        get Posts
        <br>
      operationId: PostsController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Posts'
        "403":
          description: ""
    post:
      tags:
      - posts
      description: |-
        create Posts
        <br>
      operationId: PostsController.Post
      parameters:
      - in: body
        name: body
        description: body for Posts content
        required: true
        schema:
          $ref: '#/definitions/models.Posts'
      responses:
        "201":
          description: '{int} models.Posts'
        "403":
          description: body is empty
  /posts/{id}:
    get:
      tags:
      - posts
      description: |-
        get Posts by id
        <br>
      operationId: PostsController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Posts'
        "403":
          description: :id is empty
    put:
      tags:
      - posts
      description: |-
        update the Posts
        <br>
      operationId: PostsController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Posts content
        required: true
        schema:
          $ref: '#/definitions/models.Posts'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Posts'
        "403":
          description: :id is not int
    delete:
      tags:
      - posts
      description: |-
        delete the Posts
        <br>
      operationId: PostsController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /users/:
    get:
      tags:
      - users
      description: |-
        get Users
        <br>
      operationId: UsersController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Users'
        "403":
          description: ""
    post:
      tags:
      - users
      description: |-
        create Users
        <br>
      operationId: UsersController.Post
      parameters:
      - in: body
        name: body
        description: body for Users content
        required: true
        schema:
          $ref: '#/definitions/models.Users'
      responses:
        "201":
          description: '{int} models.Users'
        "403":
          description: body is empty
  /users/{id}:
    get:
      tags:
      - users
      description: |-
        get Users by id
        <br>
      operationId: UsersController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Users'
        "403":
          description: :id is empty
    put:
      tags:
      - users
      description: |-
        update the Users
        <br>
      operationId: UsersController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Users content
        required: true
        schema:
          $ref: '#/definitions/models.Users'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Users'
        "403":
          description: :id is not int
    delete:
      tags:
      - users
      description: |-
        delete the Users
        <br>
      operationId: UsersController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
definitions:
  models.Image:
    title: Image
    type: object
    properties:
      Date:
        type: string
        format: datetime
      Id:
        type: integer
        format: int64
      Name:
        type: string
      Url:
        type: string
  models.Posts:
    title: Posts
    type: object
    properties:
      Date:
        type: string
        format: datetime
      Description:
        type: string
      Id:
        type: integer
        format: int64
      Title:
        type: string
      UserId:
        type: integer
        format: int64
  models.Users:
    title: Users
    type: object
    properties:
      Address:
        type: string
      Email:
        type: string
      Id:
        type: integer
        format: int64
      Name:
        type: string
tags:
- name: image
  description: |
    ImageController operations for Image
- name: posts
  description: |
    PostsController operations for Posts
- name: users
  description: |
    UsersController operations for Users
